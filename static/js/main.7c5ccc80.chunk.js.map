{"version":3,"sources":["logo.svg","Logic/Drawer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","DataFactory","n3","namedNode","Drawer","literal","defaultGraph","quad","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","DATASET_URL","sg","SPEED","first","signalgroups","prevGatGreen","lastGat","iLastGat","nextLastGat","AMOUNT_OF_FRAGMENTS","vertreklanen","data","lanes","state","laneValues","milliseconds","Promise","resolve","setTimeout","_store","_this2","console","log","getQuads","forEach","object","subject","connectie","signalgroup","value","test","arrivalLane","descr","@id","http://purl.org/dc/terms/description","https://w3id.org/opentrafficlights#signalGroup","setState","push","_url","fetch","then","response","text","_doc","parser","Parser","store","Store","parse","error","prefixes","addQuad","sort","a","b","Date","getTime","observation","generatedAtTime","_this3","signalstateQuad","timeTillGreen","unshift","download","doc","parseAndStoreQuads","getSignalgroups","initConfiguration","_this4","calcHistoricData","showLatest","count","prev","sleep","observations","latest","keys","fromLane","toLane","signal","signalstate","minEndTime","maxEndTime","signalPhase","Math","round","counter_","label_","start","table","react_default","createElement","className","Table","Header","Row","HeaderCell","Body","map","Cell","style","color","Component","App","Logic_Drawer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7c5ccc80.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React, { Component } from 'react';\r\nimport n3 from 'n3';\r\nimport { Table } from \"semantic-ui-react\";\r\n\r\n\r\nconst { DataFactory } = n3;\r\nconst { namedNode, literal, defaultGraph, quad } = DataFactory;\r\n\r\nclass Drawer extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.DATASET_URL = 'https://lodi.ilabt.imec.be/observer/rawdata/latest';\r\n        this.sg = 'https://opentrafficlights.org/id/signalgroup/K648/1';\r\n        this.SPEED = 0;\r\n        this.first = true;\r\n        this.signalgroups = [];\r\n        this.prevGatGreen = [];\r\n        this.lastGat = null;\r\n        this.iLastGat = null;\r\n        this.nextLastGat = null;\r\n        this.AMOUNT_OF_FRAGMENTS = 15;\r\n\r\n        this.vertreklanen = {};\r\n        this.data = {};\r\n\r\n        this.lanes = {};    // hash to translate id to description\r\n\r\n        this.state = {\r\n            laneValues: {}, //contains the\r\n        };\r\n\r\n    }\r\n\r\n    sleep(milliseconds){\r\n        return new Promise(resolve => setTimeout(resolve, milliseconds))\r\n    }\r\n\r\n    initConfiguration(_store){\r\n        console.log(\"initConfiguration\");\r\n        let laneValues = {};\r\n        _store.getQuads(null, namedNode('https://w3id.org/opentrafficlights#departureLane'), null).forEach((quad) => {\r\n            _store.getQuads(quad.object, namedNode('http://purl.org/dc/terms/description'), null).forEach( (quad) => {\r\n                _store.getQuads(null, namedNode('https://w3id.org/opentrafficlights#departureLane'), quad.subject).forEach((connectie) => {\r\n                    let signalgroup = _store.getQuads(connectie.subject, namedNode('https://w3id.org/opentrafficlights#signalGroup'), null)[0].object.value;        //why 0 ?\r\n                    console.log(\"signalGroup\");\r\n                    let test = _store.getQuads(connectie.subject, namedNode('https://w3id.org/opentrafficlights#signalGroup'), null)[0].object.value;\r\n                    console.log(test);\r\n                    _store.getQuads(connectie.subject, namedNode('https://w3id.org/opentrafficlights#arrivalLane'), null).forEach( (arrivalLane) => {\r\n                        _store.getQuads(arrivalLane.object, namedNode('http://purl.org/dc/terms/description'), null).forEach( (descr) => {\r\n                            if(!this.vertreklanen[quad.subject.value]) this.vertreklanen[quad.subject.value] = [];\r\n                            this.vertreklanen[quad.subject.value][arrivalLane.object.value] = {\r\n                                '@id': arrivalLane.object.value,\r\n                                'http://purl.org/dc/terms/description': descr.object.value,\r\n                                'https://w3id.org/opentrafficlights#signalGroup': signalgroup       // why?\r\n                            };\r\n                            if(!laneValues[quad.subject.value]) laneValues[quad.subject.value] = {};\r\n                            laneValues[quad.subject.value][arrivalLane.object.value] = [\"initial\",\"initial\"];\r\n                            if(!this.lanes[arrivalLane.object.value]){\r\n                                this.lanes[arrivalLane.object.value] = descr.object.value;\r\n                            }\r\n                        });\r\n                    });\r\n\r\n                    if(!this.lanes[quad.subject.value]){\r\n                        this.lanes[quad.subject.value] = quad.object.value;\r\n                    }\r\n\r\n                });\r\n            });\r\n        });\r\n        //console.log(laneValues);\r\n        this.setState({lanes: this.vertreklanen, laneValues: laneValues});\r\n        //console.log(this.vertreklanen);\r\n    }\r\n\r\n    async getSignalgroups(_store) {\r\n        let signalgroups = [];\r\n        await _store.getQuads(null, namedNode('http://www.w3.org/2000/01/rdf-schema#type'), namedNode('https://w3id.org/opentrafficlights#Signalgroup')).forEach( (quad) => {\r\n            signalgroups.push(quad.subject.value);\r\n        });\r\n        return signalgroups;\r\n    }\r\n\r\n    download(_url) {\r\n        return new Promise(resolve => {\r\n            fetch(_url)\r\n                .then(function(response) {\r\n                    return response.text();\r\n                })\r\n                .then(function(text) {\r\n                    resolve(text);\r\n                });\r\n        });\r\n    }\r\n\r\n    parseAndStoreQuads(_doc) {\r\n        return new Promise(resolve => {\r\n            const parser = new n3.Parser();\r\n            const store = n3.Store();\r\n            parser.parse(_doc, (error, quad, prefixes) => {\r\n                if (quad)\r\n                    store.addQuad(quad);\r\n                else\r\n                    return resolve(store);\r\n            });\r\n        })\r\n    }\r\n\r\n    async calcHistoricData(_store) {\r\n        // Loop over observations order descending\r\n        let observations = _store.getQuads(null, namedNode('http://www.w3.org/ns/prov#generatedAtTime'), null);\r\n        observations.sort(function(a, b) {\r\n            a = new Date(a.object.value).getTime();\r\n            b = new Date(b.object.value).getTime();\r\n\r\n            return a>b ? -1 : a<b ? 1 : 0;\r\n        }).forEach((observation) => {\r\n            let generatedAtTime = new Date(observation.object.value);\r\n\r\n            if(generatedAtTime !== this.lastGat){\r\n                //console.log(new Date() - generatedAtTime);\r\n                //console.log(generatedAtTime);\r\n                this.lastGat = generatedAtTime;\r\n            }\r\n\r\n            // Loop over all signalstates in the observation\r\n            _store.getQuads(null, namedNode('https://w3id.org/opentrafficlights#signalState'), null, observation.subject).forEach((signalstateQuad) => {\r\n                let signalgroup = signalstateQuad.subject.value;\r\n                let signalphase = _store.getQuads(signalstateQuad.object, namedNode('https://w3id.org/opentrafficlights#signalPhase'), null, observation.subject)[0];\r\n                let timeTillGreen;\r\n                // When green\r\n                if (signalphase.object.value === 'https://w3id.org/opentrafficlights/thesauri/signalphase/6') {\r\n                    this.prevGatGreen[signalgroup] = generatedAtTime;\r\n                    timeTillGreen = 0;\r\n                }\r\n\r\n                if (this.prevGatGreen[signalgroup] != null){ //does not work with !==\r\n                    timeTillGreen = (this.prevGatGreen[signalgroup].getTime() - generatedAtTime.getTime())/1000;\r\n\r\n                    // There's probably a data gap when this is very big\r\n                    if (timeTillGreen < 100) {\r\n                        if (!this.data[signalgroup]) this.data[signalgroup] = [];\r\n\r\n                        this.data[signalgroup].unshift({\r\n                            'generatedAtTime': new Date(generatedAtTime),\r\n                            'timeTillGreen': timeTillGreen\r\n                        })\r\n                    }\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    async start() {\r\n        console.log(\"async funtion start\");\r\n        let doc = await this.download(this.DATASET_URL);\r\n        let store = await this.parseAndStoreQuads(doc);\r\n        this.signalgroups = await this.getSignalgroups(store);\r\n        this.initConfiguration(store);\r\n\r\n        // Init\r\n        this.signalgroups.forEach((sg) => {\r\n            this.prevGatGreen[sg] = null;\r\n            this.data[sg] = [];\r\n        });\r\n\r\n        while(true) {\r\n            await this.calcHistoricData(store);\r\n            this.showLatest(store);\r\n\r\n            let count = 0;\r\n\r\n            // HISTORY\r\n            let prev = store.getQuads(null, namedNode('http://www.w3.org/ns/hydra/core#previous'), null)[0];\r\n            while (prev && count < this.AMOUNT_OF_FRAGMENTS) {\r\n                count++;\r\n\r\n                doc = await this.download(prev.object.value);\r\n                store = await this.parseAndStoreQuads(doc);\r\n\r\n                await this.calcHistoricData(store);\r\n\r\n                prev = store.getQuads(null, namedNode('http://www.w3.org/ns/hydra/core#previous'), null)[0];\r\n            }\r\n\r\n            doc = await this.download(this.DATASET_URL);\r\n            store = await this.parseAndStoreQuads(doc);\r\n\r\n            this.signalgroups.forEach((sg) => {\r\n                this.prevGatGreen[sg] = null;\r\n                this.data[sg] = [];\r\n            });\r\n\r\n            await this.sleep(this.SPEED)\r\n        }\r\n    }\r\n\r\n    async showLatest(_store) {\r\n        // Loop over observations order descending\r\n        let observations = _store.getQuads(null, namedNode('http://www.w3.org/ns/prov#generatedAtTime'), null);\r\n        //console.log(\"observations: \");\r\n        //console.log(observations);\r\n        let latest = observations.sort(function(a, b) {\r\n            a = new Date(a.object.value).getTime();\r\n            b = new Date(b.object.value).getTime();\r\n\r\n            return a>b ? -1 : a<b ? 1 : 0;\r\n        })[0];\r\n\r\n        let generatedAtTime = latest.object.value;\r\n        //console.log(\"latest: \");\r\n        //console.log(latest);\r\n\r\n        let doc = this;\r\n        let laneValues = this.state.laneValues;\r\n        Object.keys(this.vertreklanen).forEach(\r\n            function (fromLane) {\r\n                Object.keys(doc.vertreklanen[fromLane]).forEach(\r\n                    function (toLane) {\r\n                        let signal = doc.vertreklanen[fromLane][toLane]['https://w3id.org/opentrafficlights#signalGroup'];\r\n                        // Get state of active signalgroup\r\n                        //console.log(signal);\r\n                        //console.log(this.sg);\r\n                        let signalstate = _store.getQuads(namedNode(signal), namedNode('https://w3id.org/opentrafficlights#signalState'), null, latest.subject)[0];\r\n                        if (signalstate) {\r\n                            let minEndTime = _store.getQuads(signalstate.object, namedNode('https://w3id.org/opentrafficlights#minEndTime'), null, latest.subject)[0];\r\n                            let maxEndTime = _store.getQuads(signalstate.object, namedNode('https://w3id.org/opentrafficlights#maxEndTime'), null, latest.subject)[0];\r\n                            let signalPhase = _store.getQuads(signalstate.object, namedNode('https://w3id.org/opentrafficlights#signalPhase'), null, latest.subject)[0];\r\n\r\n                            let count = Math.round((new Date(minEndTime.object.value).getTime() - new Date(generatedAtTime).getTime())/1000);\r\n                            if (minEndTime.object.value === maxEndTime.object.value) {\r\n                                laneValues[fromLane][toLane] = [count, signalPhase.object.value];\r\n                                //this.showCounterLabel(count, signalPhase.object.value);\r\n                            } else {\r\n                                laneValues[fromLane][toLane] = [\">\" + count, signalPhase.object.value];\r\n                                //this.showCounterLabel(\"> \" + count, signalPhase.object.value);\r\n                            }\r\n                        }\r\n\r\n                    }\r\n                )\r\n\r\n            }\r\n        );\r\n\r\n        this.setState({\r\n            laneValues: laneValues,\r\n        })\r\n\r\n    }\r\n\r\n    showCounterLabel(counter_, label_) {\r\n        const info = '<h3>' + counter_ + \" seconden</h3>\";\r\n\r\n        // const info = '<h3 style=\"float: left\">' + label_ + '</h3><h1 style=\"font-size: 100px;\">' + counter_ + '</h1></div>';\r\n        if (label_ === 'https://w3id.org/opentrafficlights/thesauri/signalphase/2' || label_ === 'https://w3id.org/opentrafficlights/thesauri/signalphase/3') {\r\n            // Red\r\n\r\n        }\r\n        else if (label_ === 'https://w3id.org/opentrafficlights/thesauri/signalphase/5' || label_ === 'https://w3id.org/opentrafficlights/thesauri/signalphase/6') {\r\n            // green\r\n        }\r\n        else {\r\n            // orange\r\n        }\r\n        return info;\r\n    }\r\n\r\n    componentDidMount(){\r\n        console.log(\"componentDidMount\");\r\n        this.start();\r\n    }\r\n\r\n    buildTable(){\r\n        let table = \"<Table>\";\r\n        this.vertreklanen.forEach(function (fromLane) {\r\n            table += \"<Table.Row>\";\r\n            table += \"<Table.HeaderCell>\" + fromLane + \"</Table.HeaderCell>\";\r\n            this.vertreklanen[fromLane].forEach(function (toLane) {\r\n                table += \"<Table.Cell>\" + toLane + \"</Table.Cell>\";\r\n            });\r\n            table += \"</Table.Row>\";\r\n        });\r\n        table += \"</Table>\";\r\n        return table;\r\n    }\r\n\r\n    render() {\r\n        console.log(\"render\");\r\n        const {laneValues} = this.state;\r\n        //console.log(this.vertreklanen);\r\n        let doc = this;\r\n        return (\r\n            <div className=\"Drawer\">\r\n                <Table>\r\n                    <Table.Header>\r\n                        <Table.Row>\r\n                            <Table.HeaderCell>From Lane:</Table.HeaderCell>\r\n                            <Table.HeaderCell>To Lanes:</Table.HeaderCell>\r\n                        </Table.Row>\r\n                    </Table.Header>\r\n                    <Table.Body>\r\n                        {Object.keys(this.vertreklanen).map(\r\n                            function (fromLane) {\r\n                                // console.log(\"from: \" + fromLane);\r\n                                return (\r\n                                    <Table.Row><Table.Cell>{fromLane}:{doc.lanes[fromLane]}</Table.Cell>{Object.keys(doc.vertreklanen[fromLane]).map(\r\n                                        function (toLane) {\r\n                                            //console.log(\"to: \" + toLane);\r\n                                            //console.log(\"lanevalues\");\r\n                                            //console.log(laneValues);\r\n                                            const label_= laneValues[fromLane][toLane] ? laneValues[fromLane][toLane][1] : \"fail\";\r\n                                            const count = laneValues[fromLane][toLane] ? laneValues[fromLane][toLane][0] : \"fail\";\r\n                                            if (label_ === 'https://w3id.org/opentrafficlights/thesauri/signalphase/2' || label_ === 'https://w3id.org/opentrafficlights/thesauri/signalphase/3') {\r\n                                                // Red\r\n                                                return (<Table.Cell>{toLane}:{doc.lanes[toLane]}<p style={{color: 'red'}}>{count}</p></Table.Cell>);\r\n                                            }\r\n                                            else if (label_ === 'https://w3id.org/opentrafficlights/thesauri/signalphase/5' || label_ === 'https://w3id.org/opentrafficlights/thesauri/signalphase/6') {\r\n                                                // green\r\n                                                return (<Table.Cell>{toLane}:{doc.lanes[toLane]}<p style={{color: 'green'}}>{count}</p></Table.Cell>);\r\n                                            }\r\n                                            else {\r\n                                                // orange\r\n                                                return (<Table.Cell>{toLane}:{doc.lanes[toLane]}<p style={{ color: 'orange'}}>{count}</p></Table.Cell>);\r\n                                            }\r\n                                        })\r\n                                    }</Table.Row>);\r\n                            }\r\n                        )}\r\n                    </Table.Body>\r\n                </Table>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Drawer;","import React, { Component } from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport Drawer from \"./Logic/Drawer\";\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          {/* <img src={logo} className=\"App-logo\" alt=\"logo\" /> */}\r\n          <p>This visualisation gives an idea of the remaining time in a certain phase for each trajectory. The colours represent the colours of the traffic lights in their current state. The left column shows the start positions, the following rows are the end positions.</p>\r\n          <Drawer/>\r\n        </header>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}